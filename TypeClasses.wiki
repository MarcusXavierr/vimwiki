=Classes de Tipe em haskell=
As classes em haskell são um pouco diferentes do que as classes de orientação a objetos. Além de classes nos temos intâncias dessas classes que é onde o nosso tipo implementa os métodos necessários pro nosso tipo fazer parte daquela classe (por exemplo, pro nosso tipo fazer parte dos Eq, ele precisa implementar a função == ou /=)
    Tire da cabeça os conceitos de *Classe* e *Instância* vindos de orientação a objetos. Aqui uma classe de tipos nada mais é que um conjunto, uma coleção, uma lista de tipos. Por sua vez, uma instância nada mais é que dizer que um tipo pertence a uma classe, ou seja, está dentro daquele conjunto de classes.

=== Dica ===
Se tu digitar `:info TypeClass` ou `:i TypeClass`. Ex: `:info Num` tu vai conseguir ver todas as função que aquele typeclass contem. Vai ver o mínimo que tu precisa implementar, e vai te mostrar também todos os tipos (*Type*) que fazem parte daquela classes de tipos (*TypeClasses*)

E se tu digitar ( :Info Type ) `:info Int` ele vai te mostrar todas as typesclasses que aquele tipo faz parte

== Pontos chave ==
* typeclasses podem nos dar polimorfismo correto. Se eu quero que o (+) funcione pra vários tipos de números, eu posso fazer (+) :: Num a ⇒ a → a → a. Onde esse Num é um Typeclass e todo tipo (Int, Double, etc) que tiver uma instancia de Num implementada poderá ser usada nessa função acima.
* O typeclass define funções que um certo tipo precisa implementar (meio parecido com o conceito de interface). Por exemplo

{{{haskell

class Num a where
	(+) :: a -> a -> a
	(-) :: a -> a -> a
	(*) :: a -> a -> a
...
}}}

=== Exemplo ===
{{{haskell

data Temperature = C Float | F Float

instance Eq Temperature where
(==) (C n) (C m) = n == m
(==) (F n) (F m) = n == m
(==) (C c) (F f) = (1.8 * c + 32) == f
(==) (F f) (C c) = (1.8 * c + 32) == f
 }}}

Ou então vc pode usar o deriving (mas se quiser algo mais personalizado é melhor fazer a instancia na mão

{{{haskell
data Temperature = C Float | F Float
	deriving (Show, Eq)
}}}
